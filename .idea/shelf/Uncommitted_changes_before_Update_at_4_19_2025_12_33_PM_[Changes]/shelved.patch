Index: frontend/src/components/Dashboard.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from \"react\";\r\nimport Timer from \"../../../backend/timer\";\r\nimport Connector from \"../../../backend/connector\";\r\nimport ProgressBar from \"./ProgressBar\";\r\nimport \"./Dashboard.css\";\r\n\r\nconst connector = new Connector();\r\n\r\nfunction Dashboard({ userId }) {\r\n  const [user, setUser] = useState(null);\r\n  const [chores, setChores] = useState([]);\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n  const [friends, setFriends] = useState([]);\r\n  const [inactive, setInactive] = useState(true);\r\n\r\n  // For chore management\r\n  const [addingChore, setAddingChore] = useState(false);\r\n  const [removingChores, setRemovingChores] = useState(false);\r\n  const [selectedChores, setSelectedChores] = useState([]);\r\n  const [choreTitle, setChoreTitle] = useState(\"\");\r\n  const [choreDescription, setChoreDescription] = useState(\"\");\r\n  const [chorePoints, setChorePoints] = useState(\"\");\r\n  const [timer, setTimer] = useState(\"\");\r\n  const [currentTimer, setCurrentTimer] = useState({});\r\n  const [currentChore, setCurrentChore] = useState({});\r\n\r\n  // For editing chores\r\n  const [editing, setEditing] = useState(null);\r\n  const [editTitle, setEditTitle] = useState(\"\");\r\n  const [editDesc, setEditDesc] = useState(\"\");\r\n  const [editPoints, setEditPoints] = useState(\"\");\r\n  const [editTimerMs, setEditTimerMs] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchDashboardData() {\r\n      try {\r\n        // Fetch the logged-in userâ€™s data (including points)\r\n        const userData = await connector.getUser(userId);\r\n        setUser(userData);\r\n        // Fetch the list of chores from the backend\r\n        const choresData = await connector.getChores();\r\n        setChores(choresData);\r\n\r\n        const leaderboardData = await connector.getFriendsRanked(userId);\r\n        setLeaderboard(leaderboardData);\r\n\r\n        const friendsData = await connector.getFriends(userId);\r\n        setFriends(friendsData);\r\n\r\n        /*const timerData = {};\r\n        choresData.forEach((chore) => {\r\n          timerData[chore.ChoreID] = new Timer(chore.Timer * 60 * 1000);\r\n        });\r\n        setTimers(timerData);*/\r\n      } catch (error) {\r\n        console.error(\"Error fetching dashboard data:\", error);\r\n      }\r\n    }\r\n    if (userId) {\r\n      fetchDashboardData();\r\n    }\r\n  }, [userId]);\r\n\r\n  // Refresh function to re-fetch data\r\n  async function refreshData() {\r\n    try {\r\n      const id = userId.toString();\r\n      const userData = await connector.getUser(id);\r\n      setUser(userData);\r\n      const choresData = await connector.getChores();\r\n      setChores(choresData);\r\n      const leaderboardData = await connector.getFriendsRanked(id);\r\n      setLeaderboard(leaderboardData);\r\n      const friendsData = await connector.getFriends(id);\r\n      setFriends(friendsData);\r\n    } catch (error) {\r\n      console.error(\"Error refreshing dashboard data:\", error);\r\n    }\r\n  }\r\n\r\n  const handleAddChoreClick = () => {\r\n    setAddingChore(true);\r\n    setRemovingChores(false);\r\n  };\r\n\r\n  const handleAddChoreSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      // Generate a unique chore ID (using Date.now() for simplicity)\r\n      const newChoreId = Number(\r\n        BigInt.asUintN(31, BigInt(Date.now()) * 0x8000000080000001n)\r\n      );\r\n      const newChore = {\r\n        ChoreID: newChoreId,\r\n        Name: choreTitle,\r\n        Description: choreDescription,\r\n        Difficulty: parseInt(chorePoints, 10) || 0,\r\n        Timer: parseInt(timer, 10) || 0,\r\n      };\r\n\r\n      const result = await connector.setChore(newChore);\r\n      if (result && result.message === \"Success\") {\r\n        // Reset form and mode\r\n        setChoreTitle(\"\");\r\n        setChoreDescription(\"\");\r\n        setChorePoints(\"\");\r\n        setAddingChore(false);\r\n        await refreshData();\r\n      } else {\r\n        console.error(\"Failed to add chore.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error adding chore:\", error);\r\n    }\r\n  };\r\n\r\n  const handleRemoveChoreClick = () => {\r\n    setRemovingChores(!removingChores);\r\n    setAddingChore(false);\r\n    setSelectedChores([]);\r\n  };\r\n\r\n  const handleChoreCheckboxChange = (choreId) => {\r\n    if (selectedChores.includes(choreId)) {\r\n      setSelectedChores(selectedChores.filter((id) => id !== choreId));\r\n    } else {\r\n      setSelectedChores([...selectedChores, choreId]);\r\n    }\r\n  };\r\n\r\n  const handleConfirmRemove = async () => {\r\n    try {\r\n      for (const choreId of selectedChores) {\r\n        await connector.deleteChore(choreId);\r\n      }\r\n      setSelectedChores([]);\r\n      setRemovingChores(false);\r\n      await refreshData();\r\n    } catch (error) {\r\n      console.error(\"Error removing chores:\", error);\r\n    }\r\n  };\r\n\r\n  const startChore = (chore) => {\r\n    const durationMs = chore.Timer; /* ms */\r\n\r\n    var tmr = new Timer(durationMs);\r\n    setCurrentTimer(tmr);\r\n    setCurrentChore(chore);\r\n    setInactive(false);\r\n  };\r\n\r\n  const cancelChore = () => {\r\n    setInactive(true);\r\n\r\n    setCurrentTimer({});\r\n    setCurrentChore({});\r\n  };\r\n\r\n  const handleFinishChore = async (chore) => {\r\n    const choreTimer = currentTimer;\r\n    if (!choreTimer) {\r\n      alert(\"Please Start the timer first!\");\r\n      return;\r\n    }\r\n\r\n    if (!choreTimer.IsDone()) {\r\n      const remMs = choreTimer.TimeRemaining();\r\n      const remMin = Math.ceil(remMs / (1000 * 60));\r\n      console.log(choreTimer.TimeRemaining());\r\n      alert(\r\n        `Please wait ${remMin} more minute(s) before finishing this chore.`\r\n      );\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const updatedUser = { ...user };\r\n      const pts = parseInt(chore.Difficulty, 10) || 0;\r\n      updatedUser.Score += pts;\r\n      const userResult = await connector.setUser(updatedUser);\r\n      if (!(userResult && userResult.message === \"Success\")) {\r\n        console.error(\"Failed to update user points.\");\r\n        return;\r\n      }\r\n      setInactive(true);\r\n      setCurrentTimer({});\r\n      setCurrentChore({});\r\n\r\n      //await connector.deleteChore(chore.ChoreID);\r\n      await refreshData();\r\n    } catch (err) {\r\n      console.error(\"Error finishing chore:\", err);\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (chore) => {\r\n    setEditing(chore.ChoreID);\r\n    setEditTitle(chore.Name);\r\n    setEditDesc(chore.Description);\r\n    setEditPoints(chore.Difficulty);\r\n    setEditTimerMs(chore.Timer || 0);\r\n  };\r\n\r\n  const handleEditSubmit = async (e) => {\r\n    e.preventDefault();\r\n    await connector.setChore({\r\n      ChoreID: editing,\r\n      Name: editTitle,\r\n      Description: editDesc,\r\n      Difficulty: parseInt(editPoints, 10) || 0,\r\n      Timer: parseInt(editTimerMs, 10) || 0,\r\n    });\r\n    setEditing(null);\r\n    await refreshData();\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      {!inactive && currentTimer != {} && (\r\n        <div className=\"chore-overlay\">\r\n          <ProgressBar timer={currentTimer} />\r\n          <button\r\n            onClick={() => cancelChore(currentChore)}\r\n            className=\"pill-button\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            onClick={() => handleFinishChore(currentChore)}\r\n            className=\"pill-button finish-button\"\r\n          >\r\n            Finish\r\n          </button>\r\n        </div>\r\n      )}\r\n      <div className=\"underlay\">\r\n        <header className=\"dashboard-header\">\r\n          <h1>Welcome, {user ? user.FirstName : \"User\"}!</h1>\r\n          {user && <p className=\"user-points\">Points: {user.Score || 0}</p>}\r\n        </header>\r\n\r\n        <div className=\"dashboard-main\">\r\n          <div className=\"section points-section\">\r\n            <h2>Your Points</h2>\r\n            {user ? (\r\n              <p className=\"points-value\">{user.Score || 0}</p>\r\n            ) : (\r\n              <p>Loading points...</p>\r\n            )}\r\n          </div>\r\n          <div className=\"section leaderboard-section\">\r\n            <h2>Leaderboard</h2>\r\n            {leaderboard && leaderboard.length > 0 ? (\r\n              <ul className=\"leaderboard-list\">\r\n                {leaderboard.map((entry, index) => (\r\n                  <li key={entry.UserID} className=\"leaderboard-item\">\r\n                    <span className=\"rank\">{index + 1}.</span>\r\n                    {entry.FirstName || entry.FirstName}{\" \"}\r\n                    {entry.LastName || entry.LastName} - {entry.Score || 0} pts\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            ) : (\r\n              <p>No leaderboard data available.</p>\r\n            )}\r\n          </div>\r\n          <div className=\"section friends-section\">\r\n            <h2>Friends</h2>\r\n            {friends && friends.length > 0 ? (\r\n              <ul className=\"friends-list\">\r\n                {friends.map((friend) => (\r\n                  <li key={friend.UserID} className=\"friend-item\">\r\n                    {friend.FirstName || friend.FirstName}{\" \"}\r\n                    {friend.LastName || friend.LastName} - {friend.Score || 0}{\" \"}\r\n                    pts\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            ) : (\r\n              <p>No friends available.</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Chores section with add/remove functionality */}\r\n        <div className=\"chores-controls\">\r\n          <div className=\"chores-header\">\r\n            <h2>Chores</h2>\r\n            <div className=\"buttons\">\r\n              <button className=\"pill-button\" onClick={handleAddChoreClick}>\r\n                +\r\n              </button>\r\n              <button className=\"pill-button\" onClick={handleRemoveChoreClick}>\r\n                â€“\r\n              </button>\r\n            </div>\r\n          </div>\r\n          {addingChore && (\r\n            <form onSubmit={handleAddChoreSubmit} className=\"add-chore-form\">\r\n              <div className=\"form-group\">\r\n                <label>Title:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={choreTitle}\r\n                  onChange={(e) => setChoreTitle(e.target.value)}\r\n                  required\r\n                  className=\"form-input\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Description:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={choreDescription}\r\n                  onChange={(e) => setChoreDescription(e.target.value)}\r\n                  required\r\n                  className=\"form-input\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Points:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  value={chorePoints}\r\n                  onChange={(e) => setChorePoints(e.target.value)}\r\n                  required\r\n                  className=\"form-input\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Timer (ms):</label>\r\n                <input\r\n                  type=\"number\"\r\n                  value={timer}\r\n                  onChange={(e) => setTimer(e.target.value)}\r\n                  required\r\n                  className=\"form-input\"\r\n                />\r\n              </div>\r\n              <button type=\"submit\" className=\"pill-button confirm-add\">\r\n                Confirm Add\r\n              </button>\r\n            </form>\r\n          )}\r\n          {removingChores && selectedChores.length > 0 && (\r\n            <div\r\n              className=\"pill-button confirm-remove\"\r\n              onClick={handleConfirmRemove}\r\n            >\r\n              Confirm Delete\r\n            </div>\r\n          )}\r\n          <div className=\"chores-pills-container\">\r\n            {chores && chores.length > 0 ? (\r\n              chores.map((chore) => (\r\n                <div\r\n                  key={chore.ChoreID}\r\n                  className=\"chore-pill\"\r\n                  onClick={() => handleEditClick(chore)}\r\n                >\r\n                  <button\r\n                    onClick={() => startChore(chore)}\r\n                    className=\"pill-button\"\r\n                  >\r\n                    Start\r\n                  </button>\r\n                  <span className=\"chore-title\">{chore.Name}</span>\r\n                  {removingChores && (\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={selectedChores.includes(chore.ChoreID)}\r\n                      onChange={() => handleChoreCheckboxChange(chore.ChoreID)}\r\n                      className=\"chore-checkbox\"\r\n                    />\r\n                  )}\r\n                  <span className=\"chore-description\">{chore.Description}</span>\r\n                  <span className=\"chore-points\">{chore.Difficulty} pts</span>\r\n                  <button\r\n                    onClick={() => handleFinishChore(chore)}\r\n                    className=\"pill-button finish-button\"\r\n                  >\r\n                    Finished\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>No chores available.</p>\r\n            )}\r\n            {editing && (\r\n              <form onSubmit={handleEditSubmit} className=\"edit-chore-form\">\r\n                <input\r\n                  value={editTitle}\r\n                  onChange={(e) => setEditTitle(e.target.value)}\r\n                />\r\n                <input\r\n                  value={editDesc}\r\n                  onChange={(e) => setEditDesc(e.target.value)}\r\n                />\r\n                <input\r\n                  type=\"number\"\r\n                  value={editPoints}\r\n                  onChange={(e) => setEditPoints(e.target.value)}\r\n                />\r\n                <input\r\n                  type=\"number\"\r\n                  value={editTimerMs}\r\n                  onChange={(e) => setEditTimerMs(e.target.value)}\r\n                />\r\n                <button type=\"submit\"> Save Changes</button>\r\n                <button onClick={() => setEditing(null)}>Cancel</button>\r\n              </form>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/Dashboard.jsx b/frontend/src/components/Dashboard.jsx
--- a/frontend/src/components/Dashboard.jsx	(revision 7638a6e9567d77b45afdedca375dcb91c744f673)
+++ b/frontend/src/components/Dashboard.jsx	(date 1744994056950)
@@ -218,21 +218,15 @@
   return (
     <div className="dashboard-container">
       {!inactive && currentTimer != {} && (
-        <div className="chore-overlay">
-          <ProgressBar timer={currentTimer} />
-          <button
-            onClick={() => cancelChore(currentChore)}
-            className="pill-button"
-          >
-            Cancel
-          </button>
-          <button
-            onClick={() => handleFinishChore(currentChore)}
-            className="pill-button finish-button"
-          >
-            Finish
-          </button>
-        </div>
+          <div className="chore-overlay">
+            <div className="overlay-content">
+              <ProgressBar timer={currentTimer} />
+              <div className="button-row">
+                <button onClick={cancelChore} className="pill-button">Cancel</button>
+                <button onClick={() => handleFinishChore(currentChore)} className="pill-button">Finish</button>
+              </div>
+            </div>
+          </div>
       )}
       <div className="underlay">
         <header className="dashboard-header">
